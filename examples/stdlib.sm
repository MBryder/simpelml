def determineLinearFunction (listX, listY):

  for i=0 in (listX.len - 1):
    
    row = listX[i]

    newrow = []
    for r=0 in (row.len - 1):
      carry = row.pop
      newrow.push(carry)
   
    row.push(1)
    for nr=0 in (newrow.len - 1):
      carry = newrow.pop
      row.push(carry)
    listX[i] = row  

  
  xtransx = (listX^T) M* listX
  xtransxinv = xtransx.inv

  xtrans = listX^T
  altUndtagenY = xtransxinv M* xtrans

  result = altUndtagenY M* listY


  for i=0 in (listX.len - 1):
    
    row = listX[i]

    newrow = []
    for r=0 in (row.len - 2):
      carry = row.pop
      newrow.push(carry)
    row.pop
    for nr=0 in (newrow.len - 1):
      carry = newrow.pop
      row.push(carry)
    listX[i] = row

  return result

def predict(linearResult, x):
  count = linearResult.len
  result = linearResult[0][0]
  for i = 0 in count-2:
    result = result + x[i] * linearResult[i+1][0]
  return result

# Mangler funktionalitet til nogle af udregningerne 

def detailsOfLinRegModel (listX, listY):

  linearResults = determineLinearFunction(listX, listY)
  print("Linear equation: y = ", linearResults[1][0], "x + ", linearResults[0][0])

  print("Number of data pairs: Work in progress")

  print("R Squared: Work in progress")

  print("Sy.x: Work in progress")
