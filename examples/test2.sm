def findBiggest(array, big):
    biggest = big
    for j=0 in (array.len - 1):
        if array[j].list:
            for i=0 in (array[j].len - 1):
                if array[j][i].len > biggest:
                    biggest = array[j][i].len
        else:
            if array[j].len > biggest:
                biggest = array[j].len
    return biggest

def printtimes(times, char):
    result = ""
    for i=0 in times:
        result = result + char
    return result

def printRow(biggest, array):
    string = ""
    for i=0 in (array.len - 1):
        spaces = printtimes((biggest + 2), "-")
        string = string + spaces
    print(string + "-")
    string = ""
    for i=0 in (array.len - 1):
        spaces = printtimes((biggest - array[i].len), " ")
        string = string + "| " + array[i] + spaces
    string = string + "|"
    print(string)

def tabel(array, title):
    biggest = findBiggest(title, 0)
    biggest = findBiggest(array, biggest)
    
    printRow(biggest, title)

    for i=0 in (array.len - 1):
        printRow(biggest, array[i])
    print("\n")

def findMin(array, index):
    min_val = array[0][index]
    for i=1 in (array.len - 1):
        if array[i][index] < min_val:
            min_val = array[i][index]
    return min_val

def findMax(array, index):
    max_val = array[0][index]
    for i=1 in (array.len - 1):
        if array[i][index] > max_val:
            max_val = array[i][index]
    return max_val

def plotPoints(data, x_label, y_label, bonus):
    data.push(bonus)
    min_x = findMin(data, 0)
    max_x = findMax(data, 0)
    min_y = findMin(data, 1)
    max_y = findMax(data, 1)

    range_x = max_x - min_x
    range_y = max_y - min_y

    scale_x = range_x + 1
    scale_y = range_y + 1

    grid = []

    for y=0 in (range_y + 1):
        row = []
        for x=0 in (range_x + 1):
            row.push("   ")
        grid.push(row)

    
    for i=0 in (data.len - 1):
        y = (data[i][0] - min_x + 1)
        x = (max_y - data[i][1]) 
        grid[x][y] = " x "
    
    for b=0 in (bonus.len - 1 ):
        y = (bonus[0] - min_x + 1)
        x = (max_y - bonus[1]) 
        grid[x][y] = " o "
    
    for r = 0 in (grid.len - 1):
        grid[r][0] = max_y + " "
        if max_y < min_y:
            grid[r][0] = "   "
            for c = 1 in (grid[r].len - 1):
                grid[r][c] = min_x
                min_x++
        max_y--
   
    for y=0 in scale_y:

        row = grid[y][0] + " |"
        for x=1 in scale_x:
            if x == scale_x:
                print(printtimes((row.len +3),"-"))
            row = row + " " + grid[y][x] 
        print(row)
        #print(printtimes(row.len,"-"))



# Example data
ages = [[10], [11], [12], [13], [14], [15], [10], [11], [13], [15]]
height_shoe_size = [[138, 35], [142, 36], [148, 37], [154, 38], [160, 39], [166, 40], [140, 36], [144, 37], [156, 38], [168, 41]]

print("\n\n\nThis is an example program in SimpelML")
print("The program will use multi linear regression to predict age based on height and shoe size \n")

print("For this example we are using this data set for our independent variables")
title = ["height", "Shoe size"]
tabel(height_shoe_size, title)

print("\nand age for our dependent variables")
title = ["age"]
tabel(ages, title)

prediction = [160,39]
print("Plotting height vs shoe size:")
plotPoints(height_shoe_size, "Height", "Shoe Size", prediction)

determine = determineLinearFunction(height_shoe_size, ages)
print("\nAfter multi linear regression, we get this result:", determine)

print("\nWe can now use this to predict the age of person based on the hight and shoe size")

print(predict(determine, prediction))
