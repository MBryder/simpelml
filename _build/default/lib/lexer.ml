# 3 "lib/lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string


  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      [
       "if", IF; "else", ELSE;
       "print", PRINT;
       "while", WHILE;
       "and", AND; "or", OR; "not", NOT;
       "True", CST (Cbool true);
       "False", CST (Cbool false);
     ];
   fun s -> try Hashtbl.find h s with Not_found -> IDENT s

  let string_buffer = Buffer.create 1024

  let stack = ref [0]  (* indentation stack *)

  let rec unindent n = match !stack with
    | m :: _ when m = n -> []
    | m :: st when m > n -> stack := st; END :: unindent n
    | _ -> raise (Lexing_error "bad indentation")

  let update_stack n =
    match !stack with
    | m :: _ when m < n ->
      stack := n :: !stack;
      [NEWLINE; BEGIN]
    | _ ->
      NEWLINE :: unindent n

# 41 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\233\255\234\255\235\255\075\000\236\255\237\255\238\255\
    \239\255\240\255\002\000\003\000\030\000\031\000\248\255\012\000\
    \250\255\251\255\252\255\085\000\001\000\004\000\255\255\249\255\
    \246\255\245\255\243\255\241\255\199\000\255\255\002\000\004\000\
    \251\255\252\255\109\000\255\255\253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\019\000\255\255\255\255\255\255\
    \255\255\255\255\013\000\011\000\022\000\008\000\255\255\022\000\
    \255\255\255\255\255\255\002\000\001\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\020\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\030\000\033\000\
    \000\000\000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\255\255\029\000\021\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\012\000\003\000\020\000\021\000\014\000\035\000\020\000\
    \009\000\008\000\016\000\018\000\007\000\017\000\000\000\015\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\006\000\023\000\011\000\013\000\010\000\027\000\
    \026\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\025\000\024\000\000\000\000\000\019\000\
    \034\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\036\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \028\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\000\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\030\000\021\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\021\000\000\000\031\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\013\000\255\255\255\255\000\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\034\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \255\255\255\255\255\255\255\255\019\000\255\255\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \028\000\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\034\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \255\255\255\255\028\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\020\000\030\000\255\255\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_tokens lexbuf =
   __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "lib/lexer.mll"
            ( new_line lexbuf; update_stack (indentation lexbuf) )
# 200 "lib/lexer.ml"

  | 1 ->
# 52 "lib/lexer.mll"
            ( next_tokens lexbuf )
# 205 "lib/lexer.ml"

  | 2 ->
let
# 53 "lib/lexer.mll"
             id
# 211 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "lib/lexer.mll"
                ( [id_or_kwd id] )
# 215 "lib/lexer.ml"

  | 3 ->
# 54 "lib/lexer.mll"
            ( [PLUS] )
# 220 "lib/lexer.ml"

  | 4 ->
# 55 "lib/lexer.mll"
            ( [MINUS] )
# 225 "lib/lexer.ml"

  | 5 ->
# 56 "lib/lexer.mll"
            ( [TIMES] )
# 230 "lib/lexer.ml"

  | 6 ->
# 57 "lib/lexer.mll"
            ( [DIV] )
# 235 "lib/lexer.ml"

  | 7 ->
# 58 "lib/lexer.mll"
            ( [MOD] )
# 240 "lib/lexer.ml"

  | 8 ->
# 59 "lib/lexer.mll"
            ( [EQUAL] )
# 245 "lib/lexer.ml"

  | 9 ->
# 60 "lib/lexer.mll"
            ( [CMP Beq] )
# 250 "lib/lexer.ml"

  | 10 ->
# 61 "lib/lexer.mll"
            ( [CMP Bneq] )
# 255 "lib/lexer.ml"

  | 11 ->
# 62 "lib/lexer.mll"
            ( [CMP Blt] )
# 260 "lib/lexer.ml"

  | 12 ->
# 63 "lib/lexer.mll"
            ( [CMP Ble] )
# 265 "lib/lexer.ml"

  | 13 ->
# 64 "lib/lexer.mll"
            ( [CMP Bgt] )
# 270 "lib/lexer.ml"

  | 14 ->
# 65 "lib/lexer.mll"
            ( [CMP Bge] )
# 275 "lib/lexer.ml"

  | 15 ->
# 66 "lib/lexer.mll"
            ( [LP] )
# 280 "lib/lexer.ml"

  | 16 ->
# 67 "lib/lexer.mll"
            ( [RP] )
# 285 "lib/lexer.ml"

  | 17 ->
# 68 "lib/lexer.mll"
            ( [COMMA] )
# 290 "lib/lexer.ml"

  | 18 ->
# 69 "lib/lexer.mll"
            ( [COLON] )
# 295 "lib/lexer.ml"

  | 19 ->
let
# 70 "lib/lexer.mll"
               s
# 301 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 71 "lib/lexer.mll"
            ( try [CST (Cint (int_of_string s))]
              with _ -> raise (Lexing_error ("constant too large: " ^ s)) )
# 306 "lib/lexer.ml"

  | 20 ->
# 73 "lib/lexer.mll"
            ( [CST (Cstring (string lexbuf))] )
# 311 "lib/lexer.ml"

  | 21 ->
# 74 "lib/lexer.mll"
            ( NEWLINE :: unindent 0 @ [EOF] )
# 316 "lib/lexer.ml"

  | 22 ->
let
# 75 "lib/lexer.mll"
         c
# 322 "lib/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 75 "lib/lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 326 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

and indentation lexbuf =
   __ocaml_lex_indentation_rec lexbuf 28
and __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 79 "lib/lexer.mll"
      ( new_line lexbuf; indentation lexbuf )
# 338 "lib/lexer.ml"

  | 1 ->
let
# 80 "lib/lexer.mll"
              s
# 344 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 81 "lib/lexer.mll"
      ( String.length s )
# 348 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 31
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 85 "lib/lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 362 "lib/lexer.ml"

  | 1 ->
# 89 "lib/lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 368 "lib/lexer.ml"

  | 2 ->
# 92 "lib/lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 374 "lib/lexer.ml"

  | 3 ->
let
# 94 "lib/lexer.mll"
         c
# 380 "lib/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 95 "lib/lexer.mll"
      ( Buffer.add_char string_buffer c;
	string lexbuf )
# 385 "lib/lexer.ml"

  | 4 ->
# 98 "lib/lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 390 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 99 "lib/lexer.mll"
 
let token_to_string = function
    | PLUS -> "PLUS"
    | MINUS -> "MINUS"
    | TIMES -> "TIMES"
    | DIV -> "DIV"
    | MOD -> "MOD"
    | EQUAL -> "EQUAL"
    | CMP cmp ->
        begin match cmp with
        | Beq -> "CMP Beq"
        | Bneq -> "CMP Bneq"
        | Blt -> "CMP Blt"
        | Ble -> "CMP Ble"
        | Bgt -> "CMP Bgt"
        | Bge -> "CMP Bge"
        end
    | LP -> "LP"
    | RP -> "RP"
    | COMMA -> "COMMA"
    | COLON -> "COLON"
    | CST cst ->
        begin match cst with
        | Cint i -> "CST (Cint " ^ string_of_int i ^ ")"
        | Cbool b -> "CST (Cbool " ^ string_of_bool b ^ ")"
        | Cstring s -> "CST (Cstring " ^ s ^ ")"
        end
    | IDENT id -> "IDENT " ^ id
    | IF -> "IF"
    | ELSE -> "ELSE"
    | WHILE -> "WHILE"
    | AND -> "AND"
    | OR -> "OR"
    | NOT -> "NOT"
    | PRINT -> "PRINT"
    | NEWLINE -> "NEWLINE"
    | BEGIN -> "BEGIN"
    | END -> "END"
    | EOF -> "EOF"
    | _ -> "Unknown token"


  let next_token =
  Printf.printf "Token: ";
  let tokens = Queue.create () in (* next tokens to emit *)
  fun lb ->
    (* Fill the queue if it's empty *)
    if Queue.is_empty tokens then begin
      let l = next_tokens lb in
      List.iter (fun t -> Queue.add t tokens) l
    end;
  let t = Queue.pop tokens in
    (* Processing the token *)
    begin match t with
      | NEWLINE -> Printf.printf "\nToken: "
      | _ -> Printf.printf "[%s], " (token_to_string t)
    end;
    t (* Returning the token *)

# 457 "lib/lexer.ml"
