def determineLinearFunction (listX, listY):

  for i=0 in (listX.len - 1):
    row = listX[i]
    carry = row.pop
    row.push(1)
    row.push(carry)
    listX[i] = row

  xtransx = (listX^T) M* listX
  xtransxinv = xtransx.inv

  xtrans = listX^T
  altUndtagenY = xtransxinv M* xtrans

  result = altUndtagenY M* listY
  
  for i=0 in (listX.len - 1):
    row = listX[i]
    xCarry = row.pop
    row[0] = xCarry
    listX[i] = row

  return result

def predict(linearResult,x):
  return (x * linearResult[1][0] + linearResult[0][0])

def RSquared (listXX, listYY):
  SSres = 0
  SStot = 0

  for i=0 in (listXX.len - 1):
    yActual = listYY[i][0]
    yPredicted = predict(determineLinearFunction(listXX, listYY), listXX[i][0])
    difference = yActual - yPredicted
    differenceSquared = difference * difference
    SSres = SSres +  differenceSquared

  meanY = 0
  for i = 0 in (listYY.len - 1):
    meanY = meanY + listYY[i][0]

  meanY = meanY // (listYY.len)

  for i=0 in (listXX.len - 1):
    yActual = listYY[i][0]
    diff = yActual - meanY
    diffsquared = diff * diff
    SStot = SStot + diffsquared
    
  RsquaredResult = 1 - (SSres // SStot)
  return RsquaredResult
    
def dataPairs (listX2, listY2):
  return listX2.len 
  
# Test med print statements
#-----------------------------------------
sigurden = 69

print(              )

ismail = [[190], [185], [167], [180], [210]]
wahlers = [[90], [85], [40], [68], [110]]

print("Predicted weight of a person who is 181 cm tall")
print(predict(determineLinearFunction(ismail,wahlers), 181))

result = RSquared(ismail, wahlers)
print("R squared / goodness of fit: ", result)
print("Data pairs in the linear regression model: ", dataPairs(ismail, wahlers))


print(              )
print("Matrix transpose eksempel 1")
o = [[1,2,3.5],[4,5,6]]
print(o)
o = o^T
print(o)
for i = 1 in 3:
    print("Loop iteration: ", i)
test = [1,1,1]
test[0] = 3
print(test)

print(        )
print("Matrix multiplikation eksempel 1")

sigurd = [[1,2.9], [3.8,4]]
imar = [[5,6], [7,8]]
print(sigurd)
print(imar)

hans = sigurd M* imar
print(hans)

print(        )
print("Matrix multiplikation eksempel 2")

sigurd2 = [[1,2,3], [4,5,6]]
imar2 = [[1,2], [3,4], [5,6]]
print(sigurd2)
print(imar2)

hans2 = sigurd2 M* imar2
print(hans2)

print(        )
print("Matrix invers eksempel 1")

imar4 = [[1,2], [3,4]]
print(imar4)
sigurd4 = imar4.inv
print(sigurd4)

print(        )
print("Artihmetic with floats")
g = 4.55
f = 2.3

print(g*f)
print(g+f)
print(g//f)

print(           )
print("tests for int and float calculations")
print(2.5+3)
print(5+3.3)
print(1+1)
print(2.2+2.2)
print(5-2.2)
print(2*3.3)

print(        )
print("Matrix determinant eksempel 1")
imar5 = [[1.3,2.2], [3.3,4.3]]
sigurd5 = imar5.det
print(sigurd5)

print(        )
print("Matrix determinant eksempel 2")
imar6 = [[1,2], [3,4]]
sigurd6 = imar6.det
print(sigurd6)

print(        )
print("Matrix determinant eksempel 3")
imar7 = [[1.3,2], [3,4.4]]
sigurd7 = imar7.det
print(sigurd7)

print(        )
print("Matrix scale eksempel 1")
imar8 = [[1,2], [3,4]]
sigurd8 = imar8.scale(2.2)
print(sigurd8)

print(        )
print("Matrix addition eksempel 1")
imar9 = [[1,2], [3,4]]
sigurd9 = [[1,2], [3,4]]
hans9 = imar9 M+ sigurd9
print(hans9)

print(        )
print("Matrix subtraction eksempel 1")
imar10 = [[1.1,3], [3,4]]
sigurd10 = [[1,2], [3,4]]
hans10 = imar10 M- sigurd10
print(hans10)

print(3.00000001)